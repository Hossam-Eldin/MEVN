{"remainingRequest":"/media/sam/Programming/github/node.js/mevn/client/node_modules/babel-loader/lib/index.js!/media/sam/Programming/github/node.js/mevn/client/node_modules/eslint-loader/index.js??ref--13-0!/media/sam/Programming/github/node.js/mevn/client/src/store.js","dependencies":[{"path":"/media/sam/Programming/github/node.js/mevn/client/src/store.js","mtime":1546878981522},{"path":"/media/sam/Programming/github/node.js/mevn/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/sam/Programming/github/node.js/mevn/client/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/media/sam/Programming/github/node.js/mevn/client/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.function.name\";\nimport Vue from 'vue';\nimport Vuex from 'vuex';\nimport axios from 'axios';\nimport router from './router';\nVue.use(Vuex);\nexport default new Vuex.Store({\n  state: {\n    token: null,\n    user: null,\n    userId: null\n  },\n  mutations: {\n    // user auth information\n    authUser: function authUser(state, userData) {\n      state.token = userData.token;\n      state.userId = userData.userId;\n    },\n    // store user information \n    storeUser: function storeUser(state, user) {\n      state.user = user;\n    },\n    // clear data from state store \n    clearAuthData: function clearAuthData(state) {\n      state.token = null;\n      state.userId = null;\n    }\n  },\n  actions: {\n    //logout from the app when the token expire\n    setLogoutTimer: function setLogoutTimer(_ref, expirationTime) {\n      var commit = _ref.commit;\n      setTimeout(function () {\n        commit('clearAuthData');\n      }, expirationTime * 1000);\n    },\n    //sign up  function and storing the data in localstorage\n    signup: function signup(_ref2, authData) {\n      var commit = _ref2.commit,\n          dispatch = _ref2.dispatch;\n      axios.post('http://localhost:3000/auth/signup', {\n        email: authData.email,\n        name: authData.name,\n        password: authData.password\n      }).then(function (res) {\n        console.log(res.data);\n        commit('authUser', {\n          //coming form the server token and id \n          token: res.data.token,\n          userId: res.data.userId\n        }); // localStorage expirein and token and user id\n\n        var now = new Date();\n        var expirationDate = new Date(now.getTime() + res.data.expiresIn * 1000);\n        localStorage.setItem('token', res.data.token);\n        localStorage.setItem('userId', res.data.userId);\n        localStorage.setItem('expirationDate', expirationDate);\n        /*dispatch('storeUser', authData)*/\n        //  dispatch('storeUser', authData);\n\n        dispatch('setLogoutTimer', res.data.expiresIn);\n      }).catch(function (err) {\n        return console.log(err);\n      });\n      router.replace('/welcome');\n    },\n    //login and store data in localstorage\n    login: function login(_ref3, authData) {\n      var commit = _ref3.commit,\n          dispatch = _ref3.dispatch;\n      axios.post('http://localhost:3000/auth/login', {\n        email: authData.email,\n        password: authData.password\n      }).then(function (res) {\n        console.log(res);\n        var now = new Date();\n        var expirationDate = new Date(now.getTime() + res.data.expireIn * 1000);\n        localStorage.setItem('token', res.data.token);\n        localStorage.setItem('userId', res.data.id);\n        localStorage.setItem('expirationDate', expirationDate);\n        commit('authUser', {\n          token: res.data.token,\n          userId: res.data.id\n        });\n        dispatch('setLogoutTimer', res.data.expireIn);\n      }).catch(function (err) {\n        console.log(err);\n      });\n      router.replace('/welcome');\n    },\n    tryAutoLogin: function tryAutoLogin(_ref4) {\n      var commit = _ref4.commit;\n      var token = localStorage.getItem('token');\n\n      if (!token) {\n        return;\n      }\n\n      var expirationDate = localStorage.getItem('expirationDate');\n      var now = new Date();\n\n      if (now >= expirationDate) {\n        return;\n      }\n\n      var userId = localStorage.getItem('userId');\n      commit('authUser', {\n        token: token,\n        userId: userId\n      });\n    },\n    logout: function logout(_ref5) {\n      var commit = _ref5.commit;\n      commit('clearAuthData');\n      localStorage.removeItem('expirationDate');\n      localStorage.removeItem('token');\n      localStorage.removeItem('userId');\n      router.replace('/login');\n    },\n\n    /*      storeUser({commit, state}, userData){\n           if (!state.token) {\n             return\n           }\n           axios.post('',userData)\n           .then(res => console.log(res))\n           .catch(err => console.log(err))\n         }, */\n    // function user data \n    fetchUser: function fetchUser(_ref6) {\n      var commit = _ref6.commit,\n          state = _ref6.state;\n\n      if (!state.token) {\n        return;\n      }\n\n      axios.get('http://localhost:3000/auth/user-info').then(function (res) {\n        console.log(res);\n        var data = res.data;\n        var users = [];\n\n        for (var key in data) {\n          var user = data[key];\n          user.id = key;\n          users.push(user);\n        }\n\n        console.log(users);\n        commit('storeUser', users[0]);\n      }).catch(function (err) {\n        return console.log(err);\n      });\n    }\n  },\n  getters: {\n    user: function user(state) {\n      return state.user;\n    },\n    isAuthenticated: function isAuthenticated(state) {\n      //return state.token  !==null\n      return localStorage.getItem('token') !== null;\n    }\n  }\n});",{"version":3,"sources":["/media/sam/Programming/github/node.js/mevn/client/src/store.js"],"names":["Vue","Vuex","axios","router","use","Store","state","token","user","userId","mutations","authUser","userData","storeUser","clearAuthData","actions","setLogoutTimer","expirationTime","commit","setTimeout","signup","authData","dispatch","post","email","name","password","then","res","console","log","data","now","Date","expirationDate","getTime","expiresIn","localStorage","setItem","catch","err","replace","login","expireIn","id","tryAutoLogin","getItem","logout","removeItem","fetchUser","get","users","key","push","getters","isAuthenticated"],"mappings":";;AAAA,OAAOA,GAAP,MAAgB,KAAhB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEAH,GAAG,CAACI,GAAJ,CAAQH,IAAR;AAEA,eAAe,IAAIA,IAAI,CAACI,KAAT,CAAe;AAC5BC,EAAAA,KAAK,EAAE;AACHC,IAAAA,KAAK,EAAC,IADH;AAEHC,IAAAA,IAAI,EAAC,IAFF;AAGHC,IAAAA,MAAM,EAAC;AAHJ,GADqB;AAO5BC,EAAAA,SAAS,EAAE;AACP;AACAC,IAAAA,QAFO,oBAEEL,KAFF,EAESM,QAFT,EAEmB;AACtBN,MAAAA,KAAK,CAACC,KAAN,GAAcK,QAAQ,CAACL,KAAvB;AACAD,MAAAA,KAAK,CAACG,MAAN,GAAeG,QAAQ,CAACH,MAAxB;AACH,KALM;AAMP;AACAI,IAAAA,SAPO,qBAOGP,KAPH,EAOUE,IAPV,EAOe;AACpBF,MAAAA,KAAK,CAACE,IAAN,GAAcA,IAAd;AACD,KATM;AAUP;AACAM,IAAAA,aAXO,yBAWOR,KAXP,EAWa;AAClBA,MAAAA,KAAK,CAACC,KAAN,GAAc,IAAd;AACAD,MAAAA,KAAK,CAACG,MAAN,GAAe,IAAf;AACD;AAdM,GAPiB;AAwB5BM,EAAAA,OAAO,EAAE;AACL;AACAC,IAAAA,cAFK,gCAEoBC,cAFpB,EAEoC;AAAA,UAAzBC,MAAyB,QAAzBA,MAAyB;AACrCC,MAAAA,UAAU,CAAC,YAAM;AACbD,QAAAA,MAAM,CAAC,eAAD,CAAN;AACH,OAFS,EAEPD,cAAc,GAAG,IAFV,CAAV;AAGH,KANI;AAOL;AACAG,IAAAA,MARK,yBAQqBC,QARrB,EAQ+B;AAAA,UAA5BH,MAA4B,SAA5BA,MAA4B;AAAA,UAApBI,QAAoB,SAApBA,QAAoB;AAEhCpB,MAAAA,KAAK,CAACqB,IAAN,CAAW,mCAAX,EAA+C;AAC7CC,QAAAA,KAAK,EAACH,QAAQ,CAACG,KAD8B;AAE7CC,QAAAA,IAAI,EAACJ,QAAQ,CAACI,IAF+B;AAG7CC,QAAAA,QAAQ,EAAEL,QAAQ,CAACK;AAH0B,OAA/C,EAKCC,IALD,CAKM,UAAAC,GAAG,EAAI;AACXC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,IAAhB;AACCb,QAAAA,MAAM,CAAC,UAAD,EAAY;AACjB;AACAX,UAAAA,KAAK,EAACqB,GAAG,CAACG,IAAJ,CAASxB,KAFE;AAGjBE,UAAAA,MAAM,EAAEmB,GAAG,CAACG,IAAJ,CAAStB;AAHA,SAAZ,CAAN,CAFU,CAOX;;AACA,YAAMuB,GAAG,GAAG,IAAIC,IAAJ,EAAZ;AACA,YAAMC,cAAc,GAAG,IAAID,IAAJ,CAASD,GAAG,CAACG,OAAJ,KAAgBP,GAAG,CAACG,IAAJ,CAASK,SAAT,GAAqB,IAA9C,CAAvB;AACAC,QAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BV,GAAG,CAACG,IAAJ,CAASxB,KAAvC;AACA8B,QAAAA,YAAY,CAACC,OAAb,CAAqB,QAArB,EAA+BV,GAAG,CAACG,IAAJ,CAAStB,MAAxC;AACA4B,QAAAA,YAAY,CAACC,OAAb,CAAqB,gBAArB,EAAuCJ,cAAvC;AAEA;AACF;;AACEZ,QAAAA,QAAQ,CAAC,gBAAD,EAAmBM,GAAG,CAACG,IAAJ,CAASK,SAA5B,CAAR;AACD,OAtBD,EAuBCG,KAvBD,CAuBO,UAAAC,GAAG;AAAA,eAAIX,OAAO,CAACC,GAAR,CAAYU,GAAZ,CAAJ;AAAA,OAvBV;AAwBArC,MAAAA,MAAM,CAACsC,OAAP,CAAe,UAAf;AAEH,KApCI;AAqCL;AACAC,IAAAA,KAtCK,wBAsCoBrB,QAtCpB,EAsC8B;AAAA,UAA5BH,MAA4B,SAA5BA,MAA4B;AAAA,UAArBI,QAAqB,SAArBA,QAAqB;AACjCpB,MAAAA,KAAK,CAACqB,IAAN,CAAW,kCAAX,EAA8C;AAC5CC,QAAAA,KAAK,EAAEH,QAAQ,CAACG,KAD4B;AAE5CE,QAAAA,QAAQ,EAAEL,QAAQ,CAACK;AAFyB,OAA9C,EAICC,IAJD,CAIM,UAAAC,GAAG,EAAI;AACXC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AAEA,YAAMI,GAAG,GAAG,IAAIC,IAAJ,EAAZ;AACA,YAAMC,cAAc,GAAG,IAAID,IAAJ,CAASD,GAAG,CAACG,OAAJ,KAAgBP,GAAG,CAACG,IAAJ,CAASY,QAAT,GAAoB,IAA7C,CAAvB;AAEAN,QAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BV,GAAG,CAACG,IAAJ,CAASxB,KAAvC;AACA8B,QAAAA,YAAY,CAACC,OAAb,CAAqB,QAArB,EAA+BV,GAAG,CAACG,IAAJ,CAASa,EAAxC;AACAP,QAAAA,YAAY,CAACC,OAAb,CAAqB,gBAArB,EAAuCJ,cAAvC;AACAhB,QAAAA,MAAM,CAAC,UAAD,EAAY;AAChBX,UAAAA,KAAK,EAACqB,GAAG,CAACG,IAAJ,CAASxB,KADC;AAEhBE,UAAAA,MAAM,EAAEmB,GAAG,CAACG,IAAJ,CAASa;AAFD,SAAZ,CAAN;AAKAtB,QAAAA,QAAQ,CAAC,gBAAD,EAAmBM,GAAG,CAACG,IAAJ,CAASY,QAA5B,CAAR;AACD,OAnBD,EAoBCJ,KApBD,CAoBO,UAAAC,GAAG,EAAI;AAAEX,QAAAA,OAAO,CAACC,GAAR,CAAYU,GAAZ;AAAiB,OApBjC;AAqBArC,MAAAA,MAAM,CAACsC,OAAP,CAAe,UAAf;AAED,KA9DI;AA+DLI,IAAAA,YA/DK,+BA+DkB;AAAA,UAAT3B,MAAS,SAATA,MAAS;AACnB,UAAMX,KAAK,GAAG8B,YAAY,CAACS,OAAb,CAAqB,OAArB,CAAd;;AACA,UAAI,CAACvC,KAAL,EAAY;AACV;AACD;;AACD,UAAM2B,cAAc,GAAEG,YAAY,CAACS,OAAb,CAAqB,gBAArB,CAAtB;AACA,UAAMd,GAAG,GAAG,IAAIC,IAAJ,EAAZ;;AACA,UAAID,GAAG,IAAIE,cAAX,EAA2B;AACzB;AACD;;AACD,UAAMzB,MAAM,GAAE4B,YAAY,CAACS,OAAb,CAAqB,QAArB,CAAd;AACD5B,MAAAA,MAAM,CAAC,UAAD,EAAa;AACjBX,QAAAA,KAAK,EAAEA,KADU;AAEjBE,QAAAA,MAAM,EAAEA;AAFS,OAAb,CAAN;AAIF,KA9EI;AA+ETsC,IAAAA,MA/ES,yBA+EQ;AAAA,UAAT7B,MAAS,SAATA,MAAS;AACfA,MAAAA,MAAM,CAAC,eAAD,CAAN;AACAmB,MAAAA,YAAY,CAACW,UAAb,CAAwB,gBAAxB;AACAX,MAAAA,YAAY,CAACW,UAAb,CAAwB,OAAxB;AACAX,MAAAA,YAAY,CAACW,UAAb,CAAwB,QAAxB;AACA7C,MAAAA,MAAM,CAACsC,OAAP,CAAe,QAAf;AACD,KArFQ;;AAsFV;;;;;;;;AAQK;AAIDQ,IAAAA,SAlGM,4BAkGoB;AAAA,UAAf/B,MAAe,SAAfA,MAAe;AAAA,UAAPZ,KAAO,SAAPA,KAAO;;AACvB,UAAI,CAACA,KAAK,CAACC,KAAX,EAAkB;AAChB;AACD;;AACDL,MAAAA,KAAK,CAACgD,GAAN,CAAU,sCAAV,EAAkDvB,IAAlD,CAAuD,UAAAC,GAAG,EAAE;AAC1DC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,YAAMG,IAAI,GAAGH,GAAG,CAACG,IAAjB;AACA,YAAMoB,KAAK,GAAG,EAAd;;AACA,aAAK,IAAIC,GAAT,IAAgBrB,IAAhB,EAAsB;AACpB,cAAMvB,IAAI,GAAGuB,IAAI,CAACqB,GAAD,CAAjB;AACA5C,UAAAA,IAAI,CAACoC,EAAL,GAAUQ,GAAV;AACAD,UAAAA,KAAK,CAACE,IAAN,CAAW7C,IAAX;AACD;;AACDqB,QAAAA,OAAO,CAACC,GAAR,CAAYqB,KAAZ;AACAjC,QAAAA,MAAM,CAAC,WAAD,EAAaiC,KAAK,CAAC,CAAD,CAAlB,CAAN;AACD,OAXD,EAWGZ,KAXH,CAWS,UAAAC,GAAG;AAAA,eAAIX,OAAO,CAACC,GAAR,CAAYU,GAAZ,CAAJ;AAAA,OAXZ;AAYD;AAlHI,GAxBmB;AA4I5Bc,EAAAA,OAAO,EAAC;AACN9C,IAAAA,IADM,gBACDF,KADC,EACK;AACT,aAAOA,KAAK,CAACE,IAAb;AACD,KAHK;AAIN+C,IAAAA,eAJM,2BAIUjD,KAJV,EAIiB;AACrB;AAEA,aAAO+B,YAAY,CAACS,OAAb,CAAqB,OAArB,MAAiC,IAAxC;AACD;AARK;AA5IoB,CAAf,CAAf","sourcesContent":["import Vue from 'vue'\nimport Vuex from 'vuex'\nimport axios from 'axios';\nimport router from './router';\n\nVue.use(Vuex)\n\nexport default new Vuex.Store({\n  state: {\n      token:null,\n      user:null,\n      userId:null\n  },\n\n  mutations: {\n      // user auth information\n      authUser(state, userData) {\n          state.token = userData.token\n          state.userId = userData.userId\n      },  \n      // store user information \n      storeUser(state, user){\n        state.user =  user\n      },\n      // clear data from state store \n      clearAuthData(state){\n        state.token = null\n        state.userId = null\n      }\n  },\n  \n  actions: {\n      //logout from the app when the token expire\n      setLogoutTimer({commit}, expirationTime) {\n          setTimeout(() => {\n              commit('clearAuthData')\n          }, expirationTime * 1000)\n      },\n      //sign up  function and storing the data in localstorage\n      signup({commit, dispatch},authData) {\n\n          axios.post('http://localhost:3000/auth/signup',{\n            email:authData.email,\n            name:authData.name,\n            password: authData.password,\n          })\n          .then(res => {\n            console.log(res.data)\n             commit('authUser',{\n              //coming form the server token and id \n              token:res.data.token,\n              userId: res.data.userId\n            }) \n            // localStorage expirein and token and user id\n            const now = new Date()\n            const expirationDate = new Date(now.getTime() + res.data.expiresIn * 1000)\n            localStorage.setItem('token', res.data.token)\n            localStorage.setItem('userId', res.data.userId)\n            localStorage.setItem('expirationDate', expirationDate)\n\n            /*dispatch('storeUser', authData)*/\n          //  dispatch('storeUser', authData);\n            dispatch('setLogoutTimer', res.data.expiresIn)  \n          })\n          .catch(err => console.log(err))\n          router.replace('/welcome')\n\n      },\n      //login and store data in localstorage\n      login({commit,dispatch}, authData) {\n        axios.post('http://localhost:3000/auth/login',{\n          email: authData.email,\n          password: authData.password\n        })\n        .then(res => {\n          console.log(res)\n\n          const now = new Date()\n          const expirationDate = new Date(now.getTime() + res.data.expireIn * 1000)\n          \n          localStorage.setItem('token', res.data.token)\n          localStorage.setItem('userId', res.data.id)\n          localStorage.setItem('expirationDate', expirationDate)\n          commit('authUser',{\n            token:res.data.token,\n            userId: res.data.id\n          })\n\n          dispatch('setLogoutTimer', res.data.expireIn)\n        })\n        .catch(err => { console.log(err)})\n        router.replace('/welcome')\n\n      },\n      tryAutoLogin({commit}) {\n          const token = localStorage.getItem('token')\n          if (!token) {\n            return\n          }\n          const expirationDate =localStorage.getItem('expirationDate')\n          const now = new Date()\n          if (now >= expirationDate) {\n            return\n          }\n          const userId= localStorage.getItem('userId')\n         commit('authUser', {\n           token: token,\n           userId: userId\n         }) \n      },\n  logout({commit}) {\n    commit('clearAuthData')\n    localStorage.removeItem('expirationDate')\n    localStorage.removeItem('token')\n    localStorage.removeItem('userId')\n    router.replace('/login')\n  },\n /*      storeUser({commit, state}, userData){\n        if (!state.token) {\n          return\n        }\n        axios.post('',userData)\n        .then(res => console.log(res))\n        .catch(err => console.log(err))\n      }, */\n      // function user data \n\n\n\n     fetchUser({commit, state}){\n        if (!state.token) {\n          return\n        }\n        axios.get('http://localhost:3000/auth/user-info').then(res=>{\n          console.log(res)\n          const data = res.data\n          const users = []\n          for (let key in data) {\n            const user = data[key];\n            user.id = key\n            users.push(user)\n          }\n          console.log(users)\n          commit('storeUser',users[0])\n        }).catch(err => console.log(err))\n      } \n  },\n  getters:{\n    user(state){\n      return state.user\n    },\n    isAuthenticated(state) {\n      //return state.token  !==null\n\n      return localStorage.getItem('token') !==null;\n    }\n  }\n})\n"]}]}